{"version":3,"sources":["App.js","serviceWorker.js","aws-exports.js","index.js"],"names":["handleComplete","err","confirmation","alert","JSON","stringify","App","this","state","input","finalMessage","messages","Message","id","message","styles","bubbleStyles","text","fontSize","chatbubble","borderRadius","padding","headerTitle","color","header","backgroundColor","borderTop","messagesContainer","display","flexDirection","alignItems","outline","width","border","borderBottom","react_default","a","createElement","className","style","lib","hasInputField","onKeyPress","_handleKeyPress","onChange","value","dist","title","botName","welcomeMessage","onComplete","clearOnComplete","Component","Boolean","window","location","hostname","match","awsmobile","aws_app_analytics","aws_bots","aws_bots_config","name","alias","description","bot-template","commands-help","region","aws_cognito_identity_pool_id","aws_cognito_region","aws_content_delivery","aws_content_delivery_bucket","aws_content_delivery_bucket_region","aws_content_delivery_cloudfront","aws_content_delivery_cloudfront_domain","aws_mobile_analytics_app_id","aws_mobile_analytics_app_region","aws_project_id","aws_project_name","aws_project_region","aws_resource_name_prefix","aws_sign_in_enabled","aws_user_pools","aws_user_pools_id","aws_user_pools_mfa_type","aws_user_pools_web_client_id","Amplify","configure","config","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kTAKOA,UAAiB,SAACC,EAAKC,GAK1B,OAJCD,GACDE,MAAM,8BAENA,MAAO,YAAcC,KAAKC,UAAUH,EAAc,KAAM,IACjD,mEAgIII,mLA3HfC,KAAKC,MAAQ,CACXC,MAAQ,GACRC,aAAe,GACfC,SAAU,CACR,IAAIC,UAAQ,CACVC,GAAG,EACHC,QAAQ,8BAKd,IA4CMC,EAAS,CACbC,aAAc,CACZC,KAAM,CACJC,SAAU,IAEZC,WAAY,CACVC,aAAc,GACdC,QAAS,KAGbC,YAAa,CACXC,MAAO,QACPL,SAAU,IAEZM,OAAQ,CACNC,gBAAiB,mBACjBJ,QAAS,GACTK,UAAW,iCAEbC,kBAAmB,CACjBC,QAAS,OACTC,cAAe,SACfR,QAAS,GACTS,WAAY,UAEdrB,MAAO,CACLS,SAAU,GACVG,QAAS,GACTU,QAAS,OACTC,MAAO,IACPC,OAAQ,OACRC,aAAc,+BAIlB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACfH,EAAAC,EAAAC,cAAA,UAAQE,MAAOxB,EAAOS,QACtBW,EAAAC,EAAAC,cAAA,KAAGE,MAAOxB,EAAOO,aAAjB,8BAEFa,EAAAC,EAAAC,cAAA,OAAKE,MAAOxB,EAAOY,mBACnBQ,EAAAC,EAAAC,cAAA,UAAK9B,KAAKC,MAAME,cAChByB,EAAAC,EAAAC,cAACG,EAAA,SAAD,CACE7B,SAAUJ,KAAKC,MAAMG,SACrB8B,eAAe,EACfzB,aAAcD,EAAOC,eAEvBmB,EAAAC,EAAAC,cAAA,SACEK,WAAYnC,KAAKoC,gBACjBC,SAAUrC,KAAKqC,SACfL,MAAOxB,EAAON,MACdoC,MAAOtC,KAAKC,MAAMC,QAEpB0B,EAAAC,EAAAC,cAACS,EAAA,QAAD,CACIC,MAAQ,eACRC,QAAU,oBACVC,eAAiB,yCACjBC,WAAclD,EACdmD,iBAAmB,aAnHLC,aCDEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXN,IAwBeC,EAxBG,CACdC,kBAAqB,SACrBC,SAAY,SACZC,gBAAmB,CAAC,CAACC,KAAO,oBAAoBC,MAAQ,UAAUC,YAAc,kDAAkDC,eAAe,YAAYC,gBAAgB,CAAC,aAAa,gBAAgB,yBAAyB,eAAe,iBAAiB,sCAAsCC,OAAS,cACnTC,6BAAgC,iDAChCC,mBAAsB,YACtBC,qBAAwB,SACxBC,4BAA+B,4CAC/BC,mCAAsC,YACtCC,gCAAmC,SACnCC,uCAA0C,gCAC1CC,4BAA+B,mCAC/BC,gCAAmC,YACnCC,eAAkB,uCAClBC,iBAAoB,oCACpBC,mBAAsB,YACtBC,yBAA4B,oCAC5BC,oBAAuB,SACvBC,eAAkB,SAClBC,kBAAqB,sBACrBC,wBAA2B,KAC3BC,6BAAgC,8CCnBpCC,EAAQC,UAAUC,GAElBC,IAASC,OAAOvD,EAAAC,EAAAC,cAACsD,EAAD,MAASC,SAASC,eAAe,SFsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.202ad47d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {ChatBot, Interactions} from 'aws-amplify-react';\nimport {ChatFeed, Message} from 'react-chat-ui';\nimport './App.css';\n\n const handleComplete = (err, confirmation) => {\n  if(err){\n    alert('Bot conversation failed :(')\n  }\n    alert ('Success: ' + JSON.stringify(confirmation, null, 2));\n    return 'Reservation booked. Thank you! What would you like to do next?';\n}\n\nclass App extends Component {\n  render() {\nthis.state = {\n  input : '',\n  finalMessage : '',\n  messages: [\n    new Message({\n      id:1,\n      message:\"Book a flight or a car!\",\n    })\n  ],\n}\n\nconst onChange = (e) => {\n  const input = e.target.value\n  this.setState({\n    input\n  })\n}\n\n\nconst _handleKeyPress = (e) => {\n  if(e.key === 'Enter'){\n    this.submitMessage()\n  }\n}\n\nconst submitMessage = async() => {\n  const {input} = this.stateif (input === '') \n  const message = new Message ({\n    id:0,\n    message: input,\n  })\n  let messages = [...this.state.messages, message]\n\n  this.setState ({\n    messages, input: ''\n  })\n\n  const response = await Interactions.send ('BookTripMOBILEHUB', input);\n  const responseMessage = new Message ({\n    id:1, \n    message : response.message\n  })\n\n  messages = [...this.state.messages,responseMessage]\n  this.setState ({messages})\n\n  if (response.dialogState === 'Fulfilled') {\n    if (response.intentName === 'BookTripBookHotel') {\n      const { slots: { BookTripCheckInDate, BookTripLocation, BookTripNights, BookTripRoomType } } = response\n      const finalMessage = `Congratulations! Your trip to ${BookTripLocation}  with a ${BookTripRoomType} rooom on ${BookTripCheckInDate} for ${BookTripNights} days has been booked!!`\n      this.setState({ finalMessage })\n    }\n  }\n}\n\nconst styles = {\n  bubbleStyles: {\n    text: {\n      fontSize: 16,\n    },\n    chatbubble: {\n      borderRadius: 30,\n      padding: 10\n    }\n  },\n  headerTitle: {\n    color: 'white',\n    fontSize: 22\n  },\n  header: {\n    backgroundColor: 'rgb(0, 132, 255)',\n    padding: 20,\n    borderTop: '12px solid rgb(204, 204, 204)'\n  },\n  messagesContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    padding: 10,\n    alignItems: 'center'\n  },\n  input: {\n    fontSize: 16,\n    padding: 10,\n    outline: 'none',\n    width: 350,\n    border: 'none',\n    borderBottom: '2px solid rgb(0, 132, 255)'\n  }\n}\n\nreturn (\n  <div className=\"App\">\n  <header style={styles.header}>\n  <p style={styles.headerTitle}>Welcome to my travel bot!</p>\n</header>\n<div style={styles.messagesContainer}>\n<h2>{this.state.finalMessage}</h2>\n<ChatFeed\n  messages={this.state.messages}\n  hasInputField={false}\n  bubbleStyles={styles.bubbleStyles}\n/>\n<input\n  onKeyPress={this._handleKeyPress}\n  onChange={this.onChange}\n  style={styles.input}\n  value={this.state.input}\n/>\n<ChatBot \n    title = \"My React Bot\"\n    botName = \"BookTripMOBILEHUB\"\n    welcomeMessage = \"Would you like to book a car or hotel?\"\n    onComplete = {handleComplete}\n    clearOnComplete = {true}\n/>\n      </div>\n</div>\n)\n\n}\n}\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// WARNING: DO NOT EDIT. This file is Auto-Generated by AWS Mobile Hub. It will be overwritten.\n\n// Copyright 2017-2018 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.\n// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to\n// copy, distribute and modify it.\n\n// AWS Mobile Hub Project Constants\nconst awsmobile = {\n    'aws_app_analytics': 'enable',\n    'aws_bots': 'enable',\n    'aws_bots_config': [{\"name\":\"BookTripMOBILEHUB\",\"alias\":\"$LATEST\",\"description\":\"Bot to make reservations for a visit to a city.\",\"bot-template\":\"bot-trips\",\"commands-help\":[\"Book a car\",\"Reserve a car\",\"Make a car reservation\",\"Book a hotel\",\"Reserve a room\",\"I want to make a hotel reservation\"],\"region\":\"us-east-1\"}],\n    'aws_cognito_identity_pool_id': 'us-east-2:b48a4e7c-d88d-45f3-a921-3fee109be36b',\n    'aws_cognito_region': 'us-east-2',\n    'aws_content_delivery': 'enable',\n    'aws_content_delivery_bucket': 'reactchatbot-hosting-mobilehub-1617048909',\n    'aws_content_delivery_bucket_region': 'us-east-2',\n    'aws_content_delivery_cloudfront': 'enable',\n    'aws_content_delivery_cloudfront_domain': 'd2ucdpwqk5zu5p.cloudfront.net',\n    'aws_mobile_analytics_app_id': '00d6cfc181a540ceb0ef021fa42b9948',\n    'aws_mobile_analytics_app_region': 'us-east-1',\n    'aws_project_id': '20df1f49-0bfc-40e4-a9a6-c1e21a88c4c1',\n    'aws_project_name': 'react-chatbot-2019-02-04-15-02-57',\n    'aws_project_region': 'us-east-2',\n    'aws_resource_name_prefix': 'reactchatbot-mobilehub-1617048909',\n    'aws_sign_in_enabled': 'enable',\n    'aws_user_pools': 'enable',\n    'aws_user_pools_id': 'us-east-2_HpNYlu5bm',\n    'aws_user_pools_mfa_type': 'ON',\n    'aws_user_pools_web_client_id': '65k2megm9hmemicb6ead1o327d',\n}\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n//AWS Import\nimport config from './aws-exports';\nimport Amplify from 'aws-amplify';\nAmplify.configure(config)\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}